param(
  [string]$Root = "http://127.0.0.1:9103",
  [string]$ServiceName = "todo-api-9103",
  [string]$RepoDir = "C:\maiq_demo\apps\todo_api",
  [switch]$TryReinstall
)

# ---------- yardımcılar ----------
function Test-Port {
  param([string]$TargetHost,[int]$TargetPort)
  try{
    $tcp = New-Object Net.Sockets.TcpClient
    $iar = $tcp.BeginConnect($TargetHost,$TargetPort,$null,$null)
    $ok  = $iar.AsyncWaitHandle.WaitOne(1500,$false)
    if($ok -and $tcp.Connected){ $tcp.Close(); return $true }
    $tcp.Close(); return $false
  }catch{ return $false }
}
function Tail-Logs {
  if(Test-Path .\svc.err.log){ '--- svc.err.log (tail) ---'; Get-Content .\svc.err.log -Tail 60 }
  if(Test-Path .\svc.out.log){ '--- svc.out.log (tail) ---'; Get-Content .\svc.out.log -Tail 60 }
}
function Get-NssmPath {
  $cmd = Get-Command nssm -ErrorAction SilentlyContinue
  if($cmd){ return $cmd.Source }
  return $null
}

# ---------- başlangıç bilgisi ----------
$uri = [uri]$Root
$portOk = Test-Port -TargetHost $uri.DnsSafeHost -TargetPort $uri.Port
"Port reachability: $portOk"

# ---------- servis durumu ----------
$svc = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue
if(-not $portOk){
  if($svc){
    "Service state: $($svc.Status)"
    if($svc.Status -ne "Running"){
      $nssm = Get-NssmPath
      if(-not $nssm){ "nssm.exe bulunamadı (PATH içinde olmalı)."; Tail-Logs; exit 1 }
      try{ & $nssm start $ServiceName 2>$null | Out-Null; "Service start: attempted" }catch{ "Service start error: $($_.Exception.Message)" }
    }
  } else {
    "Service not found: $ServiceName"
    if($TryReinstall){
      $svcScript = Join-Path $RepoDir "scripts\svc_install.ps1"
      if(-not (Test-Path $svcScript)){ throw "svc_install script yok: $svcScript" }
      "Installing service via: $svcScript"
      powershell -NoProfile -ExecutionPolicy Bypass -File $svcScript -BindHost $uri.DnsSafeHost -BindPort $uri.Port | Write-Host
    } else {
      "Servis yok. Gerekirse -TryReinstall ile otomatik kurdurabilirsiniz." | Write-Host
    }
  }
}

# ---------- health poll ----------
$up = $false
for($i=1;$i -le 12;$i++){
  try{
    $h = Invoke-RestMethod "$Root/health" -TimeoutSec 2
    "HEALTH: " + ($h | ConvertTo-Json -Compress)
    $up = $true; break
  }catch{
    Start-Sleep -Milliseconds 500
  }
}
if(-not $up){
  "HEALTH erişilemedi. Son loglar:" | Write-Host
  Tail-Logs
  exit 2
}

# ---------- mini CRUD smoke ----------
$r1 = Invoke-RestMethod -Method Post "$Root/tasks" -ContentType 'application/json' -Body (@{title='diag-smoke'; notes='e2e'} | ConvertTo-Json)
$id = $r1.id
Invoke-RestMethod -Method Patch "$Root/tasks/$id" -ContentType 'application/json' -Body (@{done=$true} | ConvertTo-Json) | Out-Null
$r2 = Invoke-RestMethod "$Root/tasks/$id"
"CREATE id=$id"
"PATCH/GET OK (done=$($r2.done))"

# ---------- /batch hızlı kontrol ----------
# non-atomic: iki başarılı + 1 bilinçli hata → errors dolu döner
$opsNA = @{ ops = @(
  @{ op='patch';  id=$id; set=@{ done=$false } },
  @{ op='delete'; id=$id },
  @{ op='delete'; id=99999999 }
)} | ConvertTo-Json -Depth 6
$rNA = Invoke-RestMethod -Method Post "$Root/batch?atomic=false" -ContentType 'application/json' -Body $opsNA
"NON-ATOMIC RESULT: " + ($rNA | ConvertTo-Json -Compress)

# atomic: patch + hatalı delete → 400 beklenir ve rollback
try{
  $opsA = @{ ops = @(
    @{ op='patch'; id=$id; set=@{ done=$true } },
    @{ op='delete'; id=99999999 }
  )} | ConvertTo-Json -Depth 6
  Invoke-RestMethod -Method Post "$Root/batch?atomic=true" -ContentType 'application/json' -Body $opsA | Out-Null
}catch{
  "ATOMIC beklenen 400 alındı (rollback tetiklendi)."
}

$chk = Invoke-RestMethod "$Root/tasks/$id" -ErrorAction SilentlyContinue
"VERIFY ROLLBACK: exists=$($null -ne $chk) done=$($chk.done)"
