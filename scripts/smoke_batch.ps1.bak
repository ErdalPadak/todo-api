# Todo API

Basit görev servisi. Varsayılan port: **9103**  
Sağlık kontrolü: `GET /health` → `{"status":"healthy"}`

## Kimlik Doğrulama
- Eğer API key açıksa, tüm değişiklik yapan isteklerde header gerekir:
  - Header: `x-api-key: <ANAHTAR>`
  - Anahtarı `.apikey` dosyasına yazarsan scriptler otomatik okur.

## Temel Uçlar
- **POST /tasks** → görev oluştur
- **PATCH /tasks/{id}** → alan güncelle (title / notes / tags / done / due)
- **DELETE /tasks/{id}**
- **GET /tasks?limit=&offset=&done=&q=&tag=...** → liste
- **GET /metrics** → basit sayaçlar
- **GET /export?format=csv|jsonl&limit=&offset=...** → dışa aktarım
- **POST /import?format=csv|jsonl&dry_run=true|false** → içe aktarım
- **POST /batch?atomic=true|false** → toplu patch/delete
  - `atomic=false`: hatalı adım olsa da diğerleri uygulanır, `errors[]` dolar.
  - `atomic=true`: herhangi bir hata → **HTTP 400** ve **tam rollback**.

## PowerShell Örnekleri
```powershell
$root = 'http://127.0.0.1:9103'
$H = @{}
if(Test-Path .\.apikey){ $H['x-api-key']=(Get-Content .\.apikey -Raw).Trim() }

# Oluştur
$r = irm -Method Post "$root/tasks" -Headers $H -ContentType 'application/json' `
  -Body (@{ title='deneme'; notes='e2e'} | ConvertTo-Json)
$id = $r.id

# Güncelle
irm -Method Patch "$root/tasks/$id" -Headers $H -ContentType 'application/json' `
  -Body (@{ done=$true } | ConvertTo-Json)

# Export (CSV/JSONL)
irm "$root/export?format=csv&limit=3&offset=0"
irm "$root/export?format=jsonl&limit=3&offset=0"

# Import (CSV)
' title,notes'+"`n"+' Örnek,deneme' | Set-Content .\sample.csv -Encoding UTF8
irm -Method Post "$root/import?format=csv&dry_run=true"  -Headers $H -ContentType 'text/plain' -InFile .\sample.csv
irm -Method Post "$root/import?format=csv&dry_run=false" -Headers $H -ContentType 'text/plain' -InFile .\sample.csv

# Batch (atomic örnek → 400 & rollback)
$ops = @{ ops = @(
  @{ op='patch'; id=$id; set=@{ done=$false } },
  @{ op='delete'; id=99999999 }  # hattâ bilerek hata
)} | ConvertTo-Json -Depth 6
try{
  irm -Method Post "$root/batch?atomic=true" -Headers $H -ContentType 'application/json' -Body $ops
} catch { 'Beklenen 400: '+$_.Exception.Response.StatusCode.Value__ }

# 1) Proje klasörüne geç ve scripts klasörünü hazırla
cd C:\maiq_demo\apps\todo_api
if (!(Test-Path .\scripts)) { New-Item -Type Directory .\scripts | Out-Null }

# 2) smoke_batch.ps1 dosyasını oluştur
@'
param([string]$Root = "http://127.0.0.1:9103")
$ErrorActionPreference = "Stop"

function Get-Headers {
  $h = @{}
  if ($env:TODO_API_KEY) { $h['x-api-key'] = $env:TODO_API_KEY }
  elseif (Test-Path ".\.apikey") { $h['x-api-key'] = (Get-Content .\.apikey -Raw).Trim() }
  return $h
}
$H = Get-Headers

# Health
$health = irm "$Root/health"
if ($health.status -ne "healthy") { throw "Health BAD: $($health|ConvertTo-Json -Compress)" }
"HEALTH: $( $health|ConvertTo-Json -Compress )"

# 2 görev oluştur
$r1 = irm -Method Post "$Root/tasks" -Headers $H -ContentType 'application/json' -Body (@{title='batch-smoke-a';notes='e2e'}|ConvertTo-Json)
$r2 = irm -Method Post "$Root/tasks" -Headers $H -ContentType 'application/json' -Body (@{title='batch-smoke-b';notes='e2e'}|ConvertTo-Json)
$id1,$id2 = $r1.id,$r2.id
"Created: id1=$id1 id2=$id2"

# NON-ATOMIC: patch(id1), delete(id2), delete(bilinçli geçersiz)
$opsNA = @{ ops = @(
  @{ op="patch"; id=$id1; set=@{ done=$true }},
  @{ op="delete"; id=$id2 },
  @{ op="delete"; id=99999999 }
)} | ConvertTo-Json -Depth 6

$rNA = $null
try {
  $rNA = irm -Method Post "$Root/batch?atomic=false" -Headers $H -ContentType 'application/json' -Body $opsNA
} catch {
  throw "Non-atomic istek 200 dönmedi: $($_.Exception.Message)"
}
"NON-ATOMIC RESULT: $( $rNA | ConvertTo-Json -Compress )"

# Doğrula
$done1 = (irm "$Root/tasks/$id1" -Headers $H).done
$deleted2 = $false
try { irm "$Root/tasks/$id2" -Headers $H | Out-Null } catch { $deleted2 = ($_.Exception.Response.StatusCode.Value__ -eq 404) }
"VERIFY NON-ATOMIC: id1.done=$done1  id2.deleted=$deleted2  errors=$($rNA.errors.Count)"
if (-not $done1) { throw "Beklenen: id1.done True olmalı" }
if (-not $deleted2) { throw "Beklenen: id2 404 olmalı" }

# ATOMIC: rollback ve 400 beklenir
$opsAT = @{ ops = @(
  @{ op="patch"; id=$id1; set=@{ done=$false }},
  @{ op="delete"; id=99999999 }
)} | ConvertTo-Json -Depth 6

$got400 = $false
try {
  irm -Method Post "$Root/batch?atomic=true" -Headers $H -ContentType 'application/json' -Body $opsAT | Out-Null
} catch {
  $got400 = ($_.Exception.Response.StatusCode.Value__ -eq 400)
}
if (-not $got400) { throw "Beklenen 400 gelmedi (atomic hata → 400)" }

# Rollback doğrula: id1.done True kalmalı
$done1After = (irm "$Root/tasks/$id1" -Headers $H).done
"VERIFY ATOMIC (rollback): id1.done=$done1After  (beklenen: True)"
if (-not $done1After) { throw "Rollback başarısız: id1.done True kalmalıydı" }

"SMOKE BATCH: OK"
